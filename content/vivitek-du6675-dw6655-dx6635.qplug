-- Plugin for DU6675/DW6655/DX6635 projectors by Solo Works London
-- Built in Lua
-- For source, contact https://soloworks.co.uk

PluginInfo = {
	Name = "Vivitek~DU6675/DW6655/DX6635 Projector", -- The tilde here indicates folder structure in the Shematic Elements pane
	Version = "0.0.1",
	Id = "SoloWorks.Vivitek.DU6675-DW6655-DX6635Projector.0.0.1", -- show this is just a unique id. Show some commented out 'fun' unique ids
	Description = "Control for Vivitek DU6675/DW6655/DX6635 projectors",
	ShowDebug = true,
	Author = "Solo Works London"
}

-- Once you've drawn your plugin in Designer, you can determine what colors you use a lot. Save yourself some time by putting them in a table, and then simply calling them later.
local Colors = {
	White = {255, 255, 255},
	Black = {0, 0, 0},
	Red = {255, 0, 0},
	Green = {0, 255, 0}
}

-- We can let users determine some of the plugin properties by exposing them here
-- While this function can be very useful, it is completely optional and not always needed.
-- If no Properties are set here, only the position and fill properties of your plugin will show in the Properties pane
function GetProperties()
	props = {
		{
			Name = "IP Address",
			Type = "string",
			Value = "127.0.0.1"
		},
		{
			Name = "Force On High",
			Type = "boolean",
			Value = false
		}
	}
	return props
end

-- The below function is optional (like GetProperties() is), but it can allow further customization of what users can and can't do with your plugin.
-- In this example, when Model 1 is selected in the properties pane, the ability to modify some of the properties will be hidden, only allowing customization with Model 2
-- Another application of this is if you have different input/output types for different models, and want those properties to be dynamic in the Properties pane
function RectifyProperties(props)
	return props
end

-- The below function is where you will populate the controls for your plugin.
-- If you've written some of the Runtime code already, simply use the control names you populated in Text Controller/Control Script, and use their Properties to inform the values here
-- ControlType can be Button, Knob, Indicator or Text
-- ButtonType ( ControlType == Button ) can be Momentary, Toggle or Trigger
-- IndicatorType ( ControlType == Indicator ) can be Led, Meter, Text or Status
-- ControlUnit ( ControlType == Knob ) can be Hz, Float, Integer, Pan, Percent, Position or Seconds
function GetControls(props)
	ctls = {
		-- System Pins
		{
			Name = "Online",
			ControlType = "Indicator",
			IndicatorType = "Led",
			PinStyle = "Output",
			Count = 1,
			UserPin = true
		},
		{
			Name = "ConnectionState",
			ControlType = "Indicator",
			IndicatorType = "Text"
		},
		{
			Name = "IPAddress",
			ControlType = "Indicator",
			IndicatorType = "Text",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "SerialNumber",
			ControlType = "Indicator",
			IndicatorType = "Text",
			PinStyle = "Output",
			Count = 1,
			UserPin = true
		},
		-- Control Pins
		{
			Name = "Gain",
			ControlType = "Knob",
			ControlUnit = "Integer",
			Min = 0,
			Max = 255,
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "AVMute",
			ControlType = "Button",
			ButtonType = "Toggle",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "PowerOn",
			ControlType = "Button",
			ButtonType = "Momentary",
			PinStyle = "Input",
			Count = 1,
			UserPin = true
		},
		{
			Name = "PowerOff",
			ControlType = "Button",
			ButtonType = "Momentary",
			PinStyle = "Input",
			Count = 1,
			UserPin = true
		},
		{
			Name = "PowerState",
			ControlType = "Indicator",
			IndicatorType = "Text",
			PinStyle = "Output",
			Count = 1,
			UserPin = true
		},
		-- Source
		{
			Name = "ActiveSource",
			ControlType = "Indicator",
			IndicatorType = "Text",
			ControlUnit = "Integer",
			PinStyle = "Output",
			Count = 1,
			UserPin = true
		},
		{
			Name = "Source0",
			ControlType = "Button",
			ButtonType = "Momentary",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "Source1",
			ControlType = "Button",
			ButtonType = "Momentary",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "Source2",
			ControlType = "Button",
			ButtonType = "Momentary",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "Source3",
			ControlType = "Button",
			ButtonType = "Momentary",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "Source4",
			ControlType = "Button",
			ButtonType = "Momentary",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "Source5",
			ControlType = "Button",
			ButtonType = "Momentary",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "Source6",
			ControlType = "Button",
			ButtonType = "Momentary",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "Source7",
			ControlType = "Button",
			ButtonType = "Momentary",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		-- IR Emulation
		{
			Name = "IRPowerOn",
			ControlType = "Button",
			ButtonType = "Trigger",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "IRPowerOff",
			ControlType = "Button",
			ButtonType = "Trigger",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "IRMenu",
			ControlType = "Button",
			ButtonType = "Trigger",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "IRExit",
			ControlType = "Button",
			ButtonType = "Trigger",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "IREnter",
			ControlType = "Button",
			ButtonType = "Trigger",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "IRUp",
			ControlType = "Button",
			ButtonType = "Trigger",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "IRDown",
			ControlType = "Button",
			ButtonType = "Trigger",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "IRLeft",
			ControlType = "Button",
			ButtonType = "Trigger",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		},
		{
			Name = "IRRight",
			ControlType = "Button",
			ButtonType = "Trigger",
			PinStyle = "Both",
			Count = 1,
			UserPin = true
		}
	}
	return ctls
end

-- Variable holding Page Names for ease
local pagenames = {"Control", "IR Remote"}

-- This function allows you to populate pages in your plugin.
function GetPages()
	pages = {}
	for ix, name in ipairs(pagenames) do
		table.insert(pages, {name = pagenames[ix]})
	end
	return pages
end

-- This function allows you to layout pages in your plugin.
function GetControlLayout(props)
	local layout = {}
	local graphics = {}

	local CurrentPage = pagenames[props["page_index"].Value]

	if CurrentPage == "Control" then
		local x, y = 0, 0
		-- System & Connection System
		layout["Online"] = {
			PrettyName = "System~Online",
			Style = "Indicator",
			Color = {0, 255, 0},
			Position = {x + 3, y + 25},
			Size = {25, 25}
		}
		layout["ConnectionState"] = {
			Style = "Text",
			HTextAlign = "Left",
			Padding = 5,
			StrokeWidth = 0,
			Position = {x + 35, y + 25},
			Size = {200, 25}
		}
		table.insert(
			graphics,
			{
				Type = "GroupBox", -- This is the overall groupbox that will give the plugin a more 'contained' look
				Text = "Connection",
				HTextAlign = "Left",
				Fill = Colors.White,
				CornerRadius = 8,
				StrokeColor = Colors.Black,
				StrokeWidth = 1,
				Position = {x, y},
				Size = {256, 64} -- The width of the main GroupBox is dependent on how many channels the user specified. More channels means a wider group box
			}
		)

		-- Meta Data Infomation
		x, y = 0, 72
		layout["SerialNumber"] = {
			PrettyName = "System~Serial Number",
			Style = "Text",
			HTextAlign = "Left",
			Padding = 5,
			StrokeWidth = 0,
			Position = {x + 100, y + 25},
			Size = {128, 20}
		}
		table.insert(
			graphics,
			{
				Type = "GroupBox", -- This is the overall groupbox that will give the plugin a more 'contained' look
				Text = "Hardware",
				HTextAlign = "Left",
				Fill = Colors.White,
				CornerRadius = 8,
				StrokeColor = Colors.Black,
				StrokeWidth = 1,
				Position = {x, y},
				Size = {256, 64}
			}
		)
		table.insert(
			graphics,
			{
				Type = "Text",
				Text = "Serial No:",
				Font = "Roboto",
				FontSize = 12,
				FontStyle = "Bold",
				HTextAlign = "Right",
				Color = Colors.Black,
				Position = {x + 10, y + 25},
				Size = {85, 20}
			}
		)

		-- Power box
		x, y = 0, 144

		layout["SourceActive"] = {
			PrettyName = "Display~Source Active",
			Style = "Fader",
			Position = {x + 100, y},
			Size = {36, 16}
		}
		layout["PowerOn"] = {
			Legend = "On",
			PrettyName = "Display~Power On",
			Style = "Button",
			ButtonStyle = "Momentary",
			Color = {223, 0, 36},
			UnlinkOffColor = false,
			Position = {x + 8, y + 32},
			Size = {30, 30}
		}
		layout["PowerOff"] = {
			Legend = "Off",
			PrettyName = "Display~Power Off",
			Style = "Button",
			ButtonStyle = "Momentary",
			Color = {223, 0, 36},
			UnlinkOffColor = false,
			Position = {x + 48, y + 32},
			Size = {30, 30}
		}
		layout["PowerState"] = {
			PrettyName = "Display~Power State",
			Style = "Indicator",
			OffColor = "gray",
			Color = "gray",
			UnlinkOffColor = true,
			Position = {x + 88, y + 32},
			Size = {128, 30}
		}
		table.insert(
			graphics,
			{
				Type = "GroupBox", -- This is the overall groupbox that will give the plugin a more 'contained' look
				Text = "Power",
				HTextAlign = "Left",
				Fill = Colors.White,
				CornerRadius = 8,
				StrokeColor = Colors.Black,
				StrokeWidth = 1,
				Position = {x, y},
				Size = {256, 64}
			}
		)

		-- Source & Power State
		x, y = 0, 216

		layout["ActiveSource"] = {
			PrettyName = "Display~ActiveSource",
			Style = "Indicator",
			OffColor = "gray",
			Color = "gray",
			UnlinkOffColor = true,
			Position = {x + 64, y + 4},
			Size = {128, 16}
		}
		layout["Source0"] = {
			Legend = "HDMI",
			PrettyName = "Display~HDMI",
			Style = "Button",
			ButtonStyle = "Momentary",
			Color = {223, 0, 36},
			UnlinkOffColor = false,
			Position = {x + 8, y + 32},
			Size = {48, 32}
		}
		layout["Source1"] = {
			Legend = "DVI",
			PrettyName = "Display~DVI",
			Style = "Button",
			ButtonStyle = "Momentary",
			Color = {223, 0, 36},
			UnlinkOffColor = false,
			Position = {x + 64, y + 32},
			Size = {48, 32}
		}
		layout["Source2"] = {
			Legend = "VGA",
			PrettyName = "Display~VGA",
			Style = "Button",
			ButtonStyle = "Momentary",
			Color = {223, 0, 36},
			UnlinkOffColor = false,
			Position = {x + 120, y + 32},
			Size = {48, 32}
		}
		layout["Source3"] = {
			Legend = "5BNC",
			PrettyName = "Display~5BNC",
			Style = "Button",
			ButtonStyle = "Momentary",
			Color = {223, 0, 36},
			UnlinkOffColor = false,
			Position = {x + 176, y + 32},
			Size = {48, 32}
		}
		layout["Source4"] = {
			Legend = "Component",
			PrettyName = "Display~Component",
			Style = "Button",
			ButtonStyle = "Momentary",
			Color = {223, 0, 36},
			UnlinkOffColor = false,
			Position = {x + 8, y + 64},
			Size = {48, 32}
		}
		layout["Source5"] = {
			Legend = "S-Video",
			PrettyName = "Display~S-Video",
			Style = "Button",
			ButtonStyle = "Momentary",
			Color = {223, 0, 36},
			UnlinkOffColor = false,
			Position = {x + 64, y + 64},
			Size = {48, 32}
		}
		layout["Source6"] = {
			Legend = "Video",
			PrettyName = "Display~Video",
			Style = "Button",
			ButtonStyle = "Momentary",
			Color = {223, 0, 36},
			UnlinkOffColor = false,
			Position = {x + 120, y + 64},
			Size = {48, 32}
		}
		layout["Source7"] = {
			Legend = "HDBaseT",
			PrettyName = "Display~HDBaseT",
			Style = "Button",
			ButtonStyle = "Momentary",
			Color = {223, 0, 36},
			UnlinkOffColor = false,
			Position = {x + 176, y + 64},
			Size = {48, 32}
		}
		table.insert(
			graphics,
			{
				Type = "GroupBox", -- This is the overall groupbox that will give the plugin a more 'contained' look
				Text = "Source",
				HTextAlign = "Left",
				Fill = Colors.White,
				CornerRadius = 8,
				StrokeColor = Colors.Black,
				StrokeWidth = 1,
				Position = {x, y},
				Size = {256, 96}
			}
		)
	elseif CurrentPage == "IR Remote" then
		local x, y = 0, 0
		layout["IRPowerOn"] = {
			Legend = "Power On",
			PrettyName = "IR Remote~Power On",
			Style = "Button",
			Color = {0, 255, 0},
			Position = {36, 48},
			Size = {96, 32}
		}
		layout["IRPowerOff"] = {
			Legend = "Power Off",
			PrettyName = "IR Remote~Power Off",
			Style = "Button",
			Color = {0, 255, 0},
			Position = {132, 48},
			Size = {96, 32}
		}
		layout["IRMenu"] = {
			Legend = "Menu",
			PrettyName = "IR Remote~Menu",
			Style = "Button",
			Color = {0, 255, 0},
			Position = {100, 164},
			Size = {64, 32}
		}
		layout["IRExit"] = {
			Legend = "Exit",
			PrettyName = "IR Remote~Exit",
			Style = "Button",
			Color = {0, 255, 0},
			Position = {132, 80},
			Size = {96, 32}
		}
		layout["IREnter"] = {
			Legend = "Enter",
			PrettyName = "IR Remote~Enter",
			Style = "Button",
			Color = {0, 255, 0},
			Position = {36, 80},
			Size = {96, 32}
		}
		layout["IRUp"] = {
			Legend = "Up",
			PrettyName = "IR Remote~Up",
			Style = "Button",
			Color = {0, 255, 0},
			Position = {100, 132},
			Size = {64, 32}
		}
		layout["IRDown"] = {
			Legend = "Down",
			PrettyName = "IR Remote~Down",
			Style = "Button",
			Color = {0, 255, 0},
			Position = {100, 196},
			Size = {64, 32}
		}
		layout["IRLeft"] = {
			Legend = "Left",
			PrettyName = "IR Remote~Left",
			Style = "Button",
			Color = {0, 255, 0},
			Position = {36, 164},
			Size = {64, 32}
		}
		layout["IRRight"] = {
			Legend = "Right",
			PrettyName = "IR Remote~Right",
			Style = "Button",
			Color = {0, 255, 0},
			Position = {164, 164},
			Size = {64, 32}
		}
		table.insert(
			graphics,
			{
				Type = "GroupBox", -- This is the overall groupbox that will give the plugin a more 'contained' look
				Text = "Simulated IR Remote",
				HTextAlign = "Left",
				Fill = Colors.White,
				CornerRadius = 8,
				StrokeColor = Colors.Black,
				StrokeWidth = 1,
				Position = {x + 4, y + 4},
				Size = {256, 256} -- The width of the main GroupBox is dependent on how many channels the user specified. More channels means a wider group box
			}
		)
	end
	return layout, graphics
end

-- Components provide a way to save or retain certain settings without necessarily displaying it in another control such as a combobox.
-- For example, the when someone hits the "Save" button on this plugin, it saves the RGB values in the "rgb_storage" component below.
-- This allows us to do things 'under the hood' which gives the plugin a much sleeker feel.
function GetComponents(props)
	return {}
end

if Controls then
	-- Local Structure for holding State
	vivitek = {
		Host = "127.0.0.1",
		Port = 7000,
		Rx = "",
		desiredPower = nil,
		desiredSource = nil,
		Tx = nil,
		ConnState = false,
		Debug = true
	}

	-- Simple Debug Logger
	function debug(s)
		if vivitek.Debug then
			print(s)
		end
	end

	-- Build TCP Client
	conn = TcpSocket.New()
	conn.ReadTimeout = 0
	conn.WriteTimeout = 0
	conn.ReconnectTimeout = 5

	timerTimeout = Timer.New()
	timerTimeout.EventHandler = function(timer)
		timer:Stop()
		conn:Disconnect()
		vivitek.ConnState = false
		Controls.ConnectionState.String = vivitek.Host .. ":" .. vivitek.Port .. " Resting"
	end

	-- Data Sending Helper Function
	function fnSend(cmd, data)
		if vivitek.ConnState == true then
			if data == "?" then
				conn:Write("op " .. cmd .. " " .. data .. "\r")
				print("op " .. cmd .. " " .. data .. "\r")
			elseif data == "" then
				conn:Write("op " .. cmd .. "\r")
				print("op " .. cmd .. "\r")
			else
				conn:Write("op " .. cmd .. " = " .. data .. "\r")
				print(cmd .. " " .. data .. "\r")
			end
		else
			fnConnect()
		end
	end

	function fnSendIR(cmd)
		if vivitek.ConnState == true then
			conn:Write("ky " .. cmd .. "\r")
			print("ky " .. string.sub(cmd, 2, -1) .. "\r")
		else
			fnConnect()
		end
	end

	-- Create and setup Polling
	timerPoll = Timer.New()

	timerPoll.EventHandler = function(timer)
		fnPoll()
	end

	function fnInitPoll()
		timerPoll:Stop()
		timerPoll:Start(20)
	end

	function fnPoll()
		if vivitek.ConnState == true then
			conn:Write("op ser.no ?\r")
		end
	end

	function setCommsState(s)
		Controls.ConnectionState.String = vivitek.Host .. ":" .. vivitek.Port .. " " .. s
	end

	-- Setup Utility Callbacks as required
	conn.Connected = function(conn)
		--print("TCP socket is connected")
		setCommsState("Connected")
		vivitek.ConnState = true
		conn:Write("op ser.no ?\r")
		conn:Write("op status ?\r")
		conn:Write("op input.sel ?\r")
		Controls.Online.Boolean = true
	end
	conn.Reconnect = function(conn)
		setCommsState("Reconnect")
		--print("TCP socket is reconnecting")
	end
	conn.Closed = function(conn)
		setCommsState("Closed")
		fnPowerFeedback("Error")
		--print("TCP socket was closed by the remote end")
	end
	conn.Error = function(conn, err)
		setCommsState("Error")
		fnPowerFeedback("Error")
		--print("TCP socket had an error:", err)
	end
	conn.Timeout = function(conn, err)
		setCommsState("Timeout")
		fnPowerFeedback("Error")
		--print("TCP socket timed out", err)
	end

	-- Helper Function - Open TCP Connection
	function fnConnect()
		conn:Connect(vivitek.Host, vivitek.Port)
		Controls.IPAddress.String = vivitek.Host .. ":" .. vivitek.Port
		Controls.ConnectionState.String = vivitek.Host .. ":" .. vivitek.Port .. " Connecting"
	end

	-- Create and setup Source Timer
	timerSource = Timer.New()

	timerSource.EventHandler = function(timer)
		timer:Stop()
		fnSend("SOURCE", vivitek.requestedSource)
		vivitek.requestedSource = nil
	end

	function switchSource(s)
		vivitek.requestedSource = s
		if Controls.PowerState.Boolean ~= true then
			debug("Source Triggered Power On!")
			fnSend("PWR", "ON")
			--Controls.PowerState.Boolean = true
			timerSource:Stop()
			timerSource:Start(12)
		else
			debug("Switch Source" .. vivitek.requestedSource)
			fnSend("SOURCE", vivitek.requestedSource)
		end
	end

	-- Setup Event Handlers
	for k, v in pairs(Controls) do
		-- Setup Event Handler (IP Address Pin)
		if k == "IP Address" then
			-- Setup Event Handler (Mute)
			v.EventHandler = function(changedControl)
				fnConnect()
			end
		elseif k == "PowerOn" then
			v.EventHandler = function(changedControl)
				if changedControl.Boolean == true then
					debug("Pin:Sending PowerOn")
					fnSend("power.on", "")
					--Controls.PowerState.Boolean = true
					vivitek.desiredPower = true
					conn:Write("op status ?\r")
				end
			end
		elseif k == "PowerOff" then
			v.EventHandler = function(changedControl)
				if changedControl.Boolean == true then
					debug("Pin:Sending PowerOff")
					fnSend("power.off", "")
					vivitek.desiredPower = false
					conn:Write("op status ?\r")
				end
			end
		elseif k:sub(1, #"Source") == "Source" then
			-- IR Emulator commands
			k = k:sub(#"Source" + 1)
			v.EventHandler = function(changedControl)
				debug("Input selected: " .. k:sub(-1, -1))
				fnSend("input.sel", k:sub(-1, -1))
			end
		elseif k == "IRPowerOn" then
			v.EventHandler = function(changedControl)
				debug("Pin:Sending " .. k)
				fnSendIR("power.on")
			end
		elseif k == "IRPowerOff" then
			v.EventHandler = function(changedControl)
				debug("Pin:Sending " .. k)
				fnSendIR("power.off")
			end
		elseif k == "IRMenu" then
			v.EventHandler = function(changedControl)
				debug("Pin:Sending " .. k)
				fnSendIR("menu")
			end
		elseif k == "IRExit" then
			v.EventHandler = function(changedControl)
				debug("Pin:Sending " .. k)
				fnSendIR("exit")
			end
		elseif k == "IREnter" then
			v.EventHandler = function(changedControl)
				debug("Pin:Sending " .. k)
				fnSendIR("enter")
			end
		elseif k == "IRUp" then
			v.EventHandler = function(changedControl)
				debug("Pin:Sending " .. k)
				fnSendIR("up")
			end
		elseif k == "IRDown" then
			v.EventHandler = function(changedControl)
				debug("Pin:Sending " .. k)
				fnSendIR("down")
			end
		elseif k == "IRLeft" then
			v.EventHandler = function(changedControl)
				debug("Pin:Sending " .. k)
				fnSendIR("left")
			end
		elseif k == "IRRight" then
			v.EventHandler = function(changedControl)
				debug("Pin:Sending " .. k)
				fnSendIR("right")
			end
		end
	end

	-- Create and setup the Communications Timeout
	timerComms = Timer.New()

	timerComms.EventHandler = function(timer)
		timer:Stop()
		Controls.Online.Boolean = false
	end

	function fnPowerFeedback(status)
		if status == 0 then --Standby
			debug("Power Status: Standby")
			Controls.PowerState.Boolean = false
			Controls.PowerState.String = "Standby - Network OFF"
			Controls.PowerState.Color = "gray"
		elseif status == 1 then --Warming Up
			debug("Power Status: Warm up")
			Controls.PowerState.Boolean = true
			Controls.PowerState.String = "Standby - Warming up..."
			Controls.PowerState.Color = "yellow"
		elseif status == 2 then -- Imaging (active)
			debug("Power Status: Imaging (active)")
			Controls.PowerState.Boolean = true
			Controls.PowerState.String = "Lamp ON"
			Controls.PowerState.Color = "green"
		elseif status == 3 then -- Cooling
			debug("Power Status: Cooling")
			Controls.PowerState.Boolean = false
			Controls.PowerState.String = "Standby - Cooling down..."
			Controls.PowerState.Color = "yellow"
		elseif status == 4 then -- Reset
			debug("Power Status: Reset")
			Controls.PowerState.Boolean = false
			Controls.PowerState.String = "Reset"
			Controls.PowerState.Color = "orange"
		else
			debug("Error - Unknown Power state")
			Controls.PowerState.Color = "orange"
			Controls.PowerState.Boolean = false
		end
	end

	-- Process Feedback Helper
	function fnProcessFeedback(data)
		line = data
		debug("TCP socket has data:" .. line)
		-- Serial number
		if string.sub(line, 4, 9) == "ser.no" then
			debug("Serial Number: " .. string.sub(line, 12, -1))
			Controls.SerialNumber.String = string.sub(line, 12, -1)
		end
		-- Power status
		if string.sub(line, 4, 9) == "STATUS" then
			fnPowerFeedback(string.sub(line, -1, -1))
		end
		-- Input Source
		if string.sub(line, 4, 12) == "INPUT.SEL" then
			fnPowerFeedback(tonumber(string.sub(line, -1, -1)))
			debug("Input source code: " .. string.sub(line, -1, -1))
			if string.sub(line, -1, -1) == 0 then
				Controls.SourceActive.String = "HDMI"
			elseif string.sub(line, -1, -1) == 1 then
				Controls.SourceActive.String = "DVI"
			elseif string.sub(line, -1, -1) == 2 then
				Controls.SourceActive.String = "VGA"
			elseif string.sub(line, -1, -1) == 3 then
				Controls.SourceActive.String = "5BNC"
			elseif string.sub(line, -1, -1) == 4 then
				Controls.SourceActive.String = "Component"
			elseif string.sub(line, -1, -1) == 5 then
				Controls.SourceActive.String = "S-Video"
			elseif string.sub(line, -1, -1) == 6 then
				Controls.SourceActive.String = "Video"
			elseif string.sub(line, -1, -1) == 7 then
				Controls.SourceActive.String = "HDBaseT"
			end
			debug("Active Source: " .. Controls.SourceActive.String)
		end
	end

	-- Setup Data Callbacks as required
	conn.Data = function(conn)
		fnProcessFeedback(conn:Read(conn.BufferLength))
		-- Stop and restart Comms timer
		timerComms:Stop()
		if Controls.Online then -- Check for when developing in a Control Script block
			Controls.Online.Boolean = true
		end
		timerComms:Start(30)
	end

	-- Set IP address from Properties if present
	if Properties then
		if Properties["IP Address"].Value ~= "" then
			vivitek.Host = Properties["IP Address"].Value
			fnInitPoll()
		else
			print("IP Address Property Not Set")
		end
	end
end